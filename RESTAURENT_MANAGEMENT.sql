-- create database 'project' 
CREATE DATABASE RESTAURENT_MANAGEMENT ;

-- use DATABASE 'RESTAURENT_MANAGEMENT'
USE  RESTAURENT_MANAGEMENT ;

-- create table "MenuItems"
CREATE TABLE MenuItems (
    MenuItemID INT AUTO_INCREMENT PRIMARY KEY,
    ItemName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10,2)
);

-- create table "Tables"
CREATE TABLE Tables (
    TableID INT AUTO_INCREMENT PRIMARY KEY,
    TableNumber INT UNIQUE,
    Capacity INT,
    IsAvailable BOOLEAN DEFAULT TRUE
);

-- create table "customers"
CREATE TABLE customers(
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerName VARCHAR(100),
    Phone VARCHAR(15),
    Email VARCHAR(100)
);

-- create table "Reservations"
CREATE TABLE Reservations (
    ReservationID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    TableID INT,
    ReservationTime DATETIME
);

-- create table "Orders"
CREATE TABLE Orders (
    OrderID INT AUTO_INCREMENT PRIMARY KEY,
    TableID INT,
    CustomerID INT,
    OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    TotalAmount DECIMAL(10,2)
);

-- create table "OrderDetails"
CREATE TABLE OrderDetails (
    OrderDetailID INT AUTO_INCREMENT PRIMARY KEY,
    OrderID INT,
    ReservationID INT,
    MenuItemID INT,
    Quantity INT,
    FOREIGN KEY (MenuItemID) REFERENCES MenuItems(MenuItemID),
    FOREIGN KEY (ReservationID) REFERENCES Reservations(ReservationID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Insert value into each tables
INSERT INTO MenuItems (ITEMNAME,CATEGORY,PRICE) VALUES
('Margherita Pizza', 'Main Course', 299.00),
('Pasta Alfredo', 'Main Course', 349.00),
('Garlic Bread', 'Starter', 149.00),
('Cold Coffee', 'Beverage', 129.00),
('Chocolate Brownie', 'Dessert', 179.00);
SELECT *FROM MENUITEMS ;

INSERT INTO Tables (TABLENUMBER, CAPACITY, ISAVAILABLE) VALUES
(1, 2, TRUE),
(2, 4, TRUE),
(3, 6, FALSE),
(4, 2, TRUE),
(5, 8, FALSE);
SELECT * FROM TABLES;

INSERT INTO Customers (CUSTOMERNAME, PHONE, EMAIL) VALUES 
('Arjun Kumar', '9876543210', 'arjun@example.com'),
('Priya Sharma', '9876501234', 'priya@example.com'),
('Rahul Mehta', '9998887776', 'rahul@example.com'),
('Sneha Patel', '9123456789', 'sneha@example.com'),
('Vikram Singh', '9988776655', 'vikram@example.com');
SELECT * FROM CUSTOMERS ;

INSERT INTO Reservations (CUSTOMERID, TABLEID, RESERVATIONTIME) VALUES
(1, 2, '2025-10-23 19:00:00'),
(2, 1, '2025-10-23 20:00:00'),
(3, 3, '2025-10-24 18:30:00'),
(4, 4, '2025-10-24 21:00:00'),
(5, 5, '2025-10-25 19:30:00');
SELECT * FROM RESERVATIONS ;

INSERT INTO Orders (TableID, CustomerID, TotalAmount)
VALUES 
(1, 1, 500.00),
(2, 2, 300.00),
(3, 3, 750.00),
(4, 4, 200.00),
(5, 5, 450.00);
SELECT * FROM Orders;

INSERT INTO OrderDetails (OrderID, ReservationID, Quantity) VALUES
(1, 1, 1),
(1, 4, 2),
(2, 3, 2),
(3, 1, 1),
(3, 5, 2),
(4, 2, 1),
(4, 4, 1),
(5, 1, 1),
(5, 2, 1),
(5, 5, 1);
SELECT * FROM OrderDetails;

-- USING JOINS
SELECT O.ORDERID,C.CUSTOMERID,O.TOTALAMOUNT,O.ORDERDATE FROM ORDERS O 
JOIN CUSTOMERS C ON O.CUSTOMERID = C.CUSTOMERID;

-- USING VIEW
CREATE VIEW RESERVATIONDETAILS AS 
SELECT R.RESERVATIONID,C.CUSTOMERNAME,T.TABLENUMBER,R.RESERVATIONTIME FROM RESERVATIONS R JOIN CUSTOMERS C 
ON R.CUSTOMERID = C.CUSTOMERID JOIN TABLES T ON R.TABLEID= T. TABLEID;

SELECT * FROM RESERVATIONDETAILS;

SELECT CUSTOMERNAME 
FROM CUSTOMERS WHERE CUSTOMERID IN ( SELECT CUSTOMERID FROM ORDERS 
WHERE TOTALAMOUNT >(SELECT AVG(TOTALAMOUNT) FROM ORDERS) );

-- USING TRIGGER
DELIMITER $$
CREATE TRIGGER AFTERRESERVATION
AFTER INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
UPDATE TABLES
SET ISAVAILABLE = FALSE 
WHERE TABLEID = NEW.TABLEID;
END $$
DELIMITER ;

SELECT * FROM TABLES WHERE TABLEID = 2;

DELIMITER // 
CREATE PROCEDURE GETCUSTOMERORDERCOUNT(IN CUST_ID INT)
BEGIN
SELECT C.CUSTOMERNAME, COUNT(O.ORDERID) AS TOTALORDERS FROM CUSTOMERS C LEFT JOIN ORDERS O ON
C.CUSTOMERID = O.CUSTOMERID WHERE C.CUSTOMERID = CUST_ID GROUP BY C.CUSTOMERNAME;
END//

-- TO EXECUTE TRIGGER
CALL GETCUSTOMERORDERCOUNT(1);